* See session on Building Watch Apps (link TODO)
* Very controlled environment - each application component (App, Glance, Notification, Compliation) has base class and is very structured
* 3 Main components:
  * iOS Application
  * WatchOS Watch Application (runs on phone)
    * Resources and Interface definition
  * WatchOS WatchKit Extension (runs on watch)
    * Watch Application (Code)
    * Additional Resources
* 4 roles in watchkit architecture (each with base classes)
  * Application
  * Glance
  * notification
  * Complication - see separate session on complications (link TODO)
* Resources need to be in the right place for the right purpose - e.g. images in application bundle can be used to link to interface outlets but those in extension bundle cannot - but can be accessed via code.
* Data Storage Folders
  * Document Directory - non-purgable by system but not restored on re-install
  * Cache Directory - temporary and purgable at any time by system
* Media
  * play/record - done on the application (on phone)
  * Downloads / reads recorded audio file - done in extension
  * Neeed to create a shared storage area by creating an "app group" so extension and application can share this kind of data in either direction
* Data Transfers
  * NSURLSession 
    * Download direct from remote server etc (http & https)
    * Background downloads possible (e.g. when watch screen turned off)
    * Once file is downloaded, it's in temporary cache so need to access immediately before purge
  * WatchKit Connectivity Framework
    * Share data
    * Transfer files 
    * See session "Introducing Watch Connectivity" (link TODO)
    

  
  
